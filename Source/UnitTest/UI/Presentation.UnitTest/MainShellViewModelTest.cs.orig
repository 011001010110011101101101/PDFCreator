using NSubstitute;
using NUnit.Framework;
using pdfforge.Obsidian.Trigger;
using pdfforge.PDFCreator.Core.Controller;
using pdfforge.PDFCreator.Core.Services;
using pdfforge.PDFCreator.UI.Presentation;
using pdfforge.PDFCreator.UI.Presentation.Commands;
using pdfforge.PDFCreator.UI.Presentation.Helper;
using pdfforge.PDFCreator.UI.Presentation.Helper.Translation;
using pdfforge.PDFCreator.Utilities.Threading;
using Prism.Events;
using Prism.Regions;
using System.Windows.Input;
using Translatable;

namespace Presentation.UnitTest
{
    [TestFixture]
    public class MainShellViewModelTest
    {
        private IRegionManager _regionManager;
        private ICommand navigateMainTabCommand;

        [SetUp]
        public void Setup()
        {
            _regionManager = Substitute.For<IRegionManager>();
            var commandLocator = Substitute.For<ICommandLocator>();
            navigateMainTabCommand = Substitute.For<ICommand>();
            commandLocator.GetCommand<NavigateMainTabCommand>().Returns(navigateMainTabCommand);
<<<<<<< HEAD
            ViewModel = new MainShellViewModel(_regionManager, new DragAndDropEventHandler(Substitute.For<IFileConversionHandler>()), new TranslationUpdater(new TranslationFactory(), new ThreadManager()), new ApplicationNameProvider("Free"), new InteractionRequest(), new EventAggregator(), commandLocator);
=======
            ViewModel = new MainShellViewModel(_regionManager, new DragAndDropEventHandler(Substitute.For<IFileConversionHandler>()), new TranslationUpdater(new TranslationFactory(), new ThreadManager()), new ApplicationNameProvider("", ""), new InteractionRequest(), new EventAggregator(), commandLocator, null);
>>>>>>> WIP
        }

        private MainShellViewModel ViewModel { get; set; }

        [Test]
        public void DoNavigate_WithUri_CallsRegionManager()
        {
            var wasRun = false;
            navigateMainTabCommand.When(navigateMainTabCommand => navigateMainTabCommand.Execute("MyView")).Do(info => wasRun = true);
            ViewModel.NavigateCommand.Execute("MyView");

            Assert.IsTrue(wasRun);
        }

        [Test]
        public void NoViewModelExists_CreateInstance_ViewModelExists()
        {
            Assert.NotNull(ViewModel);
        }
    }
}
